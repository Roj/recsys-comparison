/* This file may be freely modified, used, and redistributed without restriction. */
/* Set up the repositories to get the LensKit plugin.
 * This configuration pulls in things needed for the build.gradle script itself */

buildscript {
    repositories {
        // LensKit snapshots are published to the Sonatype snapshot repository
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
        // LensKit releases are published to Maven Central
        mavenCentral()
    }
    dependencies {
        classpath 'org.lenskit:lenskit-gradle:3.0-M2'
    }
}

apply plugin: 'java' // if you use Groovy or Scala, add those plugins
apply plugin: 'lenskit'

/* Set up the repositories for getting LensKit and other libraries.
 * These repositories are used for your Java or Groovy code, and for running LensKit.
 */
repositories {
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
    mavenCentral()
}

dependencies {
    // Code needs to build with LensKit.
    compile "org.lenskit:lenskit-all:3.0-M2"
    // To run the code, we also need the LensKit CLI.
    runtime "org.lenskit:lenskit-cli:3.0-M2"

    // Tests use JUnit
    testCompile "junit:junit:4.12"
}

/* Configure LensKit */
lenskit {
    // you can configure the threadCount and maxMemory here, or on the command line
    if (project.hasProperty('lenskitMaxMemory')) {
        maxMemory lenskitMaxMemory
    }
    if (project.hasProperty('lenskitThreadCount')) {
        threadCount = lenskitThreadCount.toInteger()
    }
}

import org.lenskit.gradle.*
apply from: 'dataset-tasks/movielens.gradle'
apply from: 'dataset-tasks/lastfm.gradle'
apply from: 'dataset-tasks/jester.gradle'
apply from: 'dataset-tasks/bookcrossings.gradle'
apply from: 'dataset-tasks/amazon-musical-instruments.gradle'
apply from: 'dataset-tasks/amazon-instant-video.gradle'
apply from: 'dataset-tasks/amazon-video-games.gradle'
apply from: 'dataset-tasks/amazon-baby.gradle'
apply from: 'dataset-tasks/amazon-grocery-gourmet-food.gradle'
apply from: 'dataset-tasks/amazon-office-products.gradle'
apply from: 'dataset-tasks/amazon-digital-music.gradle'
apply from: 'dataset-tasks/amazon-patio-lawn-garden.gradle'
apply from: 'dataset-tasks/amazon-pet-supplies.gradle'
apply from: 'dataset-tasks/amazon-books.gradle'
apply from: 'dataset-tasks/amazon-automotive.gradle'
apply from: 'dataset-tasks/amazon-android-apps.gradle'
apply from: 'dataset-tasks/amazon-beauty.gradle'
apply from: 'dataset-tasks/amazon-health-personal-care.gradle'
apply from: 'dataset-tasks/amazon-tools-home-improvement.gradle'
apply from: 'dataset-tasks/amazon-toys-games.gradle'
apply from: 'dataset-tasks/amazon-CDs-vinyl.gradle'
apply from: 'dataset-tasks/amazon-cell-phones-accessories.gradle'
apply from: 'dataset-tasks/amazon-clothing-shoes-jewelry.gradle'
apply from: 'dataset-tasks/amazon-electronics.gradle'
apply from: 'dataset-tasks/amazon-home-kitchen.gradle'
apply from: 'dataset-tasks/amazon-kindle-store.gradle'
apply from: 'dataset-tasks/amazon-movies-TV.gradle'
apply from: 'dataset-tasks/amazon-sports-outdoors.gradle'

/* Run the LensKit evaluation */
task evaluateAll(type: TrainTest, group: 'evaluate') {
    dependsOn 'evaluateMovielens'
    dependsOn 'evaluateLastfm'
//    dependsOn 'evaluateJester'
//    dependsOn 'evaluateBookcrossings'
    dependsOn 'evaluateAmazonMusicalInstruments'
    dependsOn 'evaluateAmazonInstantVideo'
    dependsOn 'evaluateAmazonVideoGames'
    dependsOn 'evaluateAmazonBaby'
//    dependsOn 'evaluateAmazonDigitalMusic'
    dependsOn 'evaluateAmazonGroceryGourmetFood'
    dependsOn 'evaluateAmazonOfficeProducts'
    dependsOn 'evaluateAmazonPatioLawnGarden'
    dependsOn 'evaluateAmazonPetSupplies'
    dependsOn 'evaluateAmazonBooks'
    dependsOn 'evaluateAmazonAutomotive'
    dependsOn 'evaluateAmazonAndroidApps'
    dependsOn 'evaluateAmazonBeauty'
    dependsOn 'evaluateAmazonHealthAndPersonalCare'
    dependsOn 'evaluateAmazonToolsAndHomeImprovement'
    dependsOn 'evaluateAmazonToysAndGames'
    dependsOn 'evaluateAmazonCDsAndVinyl'
    dependsOn 'evaluateAmazonCellPhonesAndAccessories'
    dependsOn 'evaluateAmazonClothingShoesAndJewelry'
    dependsOn 'evaluateAmazonElectronics'
    dependsOn 'evaluateAmazonHomeAndKitchen'
    dependsOn 'evaluateAmazonKindleStore'
    dependsOn 'evaluateAmazonMoviesAndTV'
    dependsOn 'evaluateAmazonSportsAndOutdoors'
}

/* Run the LensKit evaluation */
task cleanAllData {
    dependsOn 'cleanDataMovielens'
    dependsOn 'cleanDataLastfm'
    dependsOn 'cleanDataJester'
    dependsOn 'cleanDataBookcrossings'
    dependsOn 'cleanDataAmazonMusicalInstruments'
    dependsOn 'cleanDataAmazonInstantVideo'
    dependsOn 'cleanDataAmazonVideoGames'
    dependsOn 'cleanDataAmazonBaby'
    dependsOn 'cleanDataAmazonDigitalMusic'
    dependsOn 'cleanDataAmazonGroceryGourmetFood'
    dependsOn 'cleanDataAmazonOfficeProducts'
    dependsOn 'cleanDataAmazonPatioLawnGarden'
    dependsOn 'cleanDataAmazonPetSupplies'
    dependsOn 'cleanDataAmazonBooks'
    dependsOn 'cleanDataAmazonAutomotive'
    dependsOn 'cleanDataAmazonAndroidApps'
    dependsOn 'cleanDataAmazonBeauty'
    dependsOn 'cleanDataAmazonHealthAndPersonalCare'
    dependsOn 'cleanDataAmazonToolsAndHomeImprovement'
    dependsOn 'cleanDataAmazonToysAndGames'
    dependsOn 'cleanDataAmazonCDsAndVinyl'
    dependsOn 'cleanDataAmazonCellPhonesAndAccessories'
    dependsOn 'cleanDataAmazonClothingShoesAndJewelry'
    dependsOn 'cleanDataAmazonElectronics'
    dependsOn 'cleanDataAmazonHomeAndKitchen'
    dependsOn 'cleanDataAmazonKindleStore'
    dependsOn 'cleanDataAmazonMoviesAndTV'
    dependsOn 'cleanDataAmazonSportsAndOutdoors'
}

task analyzeAllResults(type: Exec, group: 'evaluate') {
    description 'Post-processes evaluation results to draw charts from data-analysis folder'

    inputs.files 'analyze-output.ipynb'
    outputs.file "data-analysis/analysis.html"

    /* run Jupyter/IPython. Location can be overridden with -Pipython.bin=/usr/bin/ipython */
    if (project.hasProperty('ipython.bin')) {
        executable project.getProperty('ipython.bin')
    } else {
        executable 'jupyter'
    }
    args 'nbconvert', '--to', 'html', '--execute'
    args '--output', file("data-analysis/analysis.html")
    args file("analyze-output.ipynb")
}