/* This file may be freely modified, used, and redistributed without restriction. */
/* Set up the repositories to get the LensKit plugin.
 * This configuration pulls in things needed for the build.gradle script itself */

System.setProperty("jsse.enableSNIExtension","false");

//Choose dataset:
//one of: movielens lastfm bookcrossings jester
// or use -Pdataset=[dataset]
def dataset
def datasetResultFolder = "$buildDir/results/"+dataset

task setDataset {
    if (project.hasProperty('dataset')) {
        dataset = project.dataset
    } else {
        dataset = "movielens"
    }
    datasetResultFolder = "$buildDir/results/"+dataset
}

buildscript {
    repositories {
        // LensKit snapshots are published to the Sonatype snapshot repository
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
        // LensKit releases are published to Maven Central
        mavenCentral()
    }
    dependencies {
        classpath 'org.lenskit:lenskit-gradle:3.0-M2'
    }
}

apply plugin: 'java' // if you use Groovy or Scala, add those plugins
apply plugin: 'lenskit'

/* Set up the repositories for getting LensKit and other libraries.
 * These repositories are used for your Java or Groovy code, and for running LensKit.
 */
repositories {
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
    mavenCentral()
}

dependencies {
    // Code needs to build with LensKit.
    compile "org.lenskit:lenskit-all:3.0-M2"
    // To run the code, we also need the LensKit CLI.
    runtime "org.lenskit:lenskit-cli:3.0-M2"

    // Tests use JUnit
    testCompile "junit:junit:4.12"
}

/* Configure LensKit */
lenskit {
    // you can configure the threadCount and maxMemory here, or on the command line
	maxMemory '14g'
    // e.g. -PthreadCount=8
}

import org.lenskit.gradle.*

/* Download the corresponding data set */
task fetchData {
    dependsOn setDataset
    description 'Fetches the corresponding data set. '+ dataset

    //Define the variables for the dataset
    def include_name
    def url_src

    if(dataset.equals("movielens")) {
        ext.dataDir = "data/ml-100k"
        ext.zipFile = "data/ml-100k.zip"
    
        include_name = 'ml-100k/*'
        url_src = 'http://files.grouplens.org/papers/ml-100k.zip'
    } else if(dataset.equals("lastfm")) {
        ext.dataDir = "data/lastfm-2k/"
        ext.zipFile = "data/lastfm-2k.zip"
    
        include_name = '*'
        url_src = 'http://files.grouplens.org/datasets/hetrec2011/hetrec2011-lastfm-2k.zip'
    } else if(dataset.equals("bookcrossings")) {
        ext.dataDir = "data/bookcrossings/"
        ext.zipFile = "data/bookcrossings.zip"
    
        include_name = '*'
        url_src = 'http://drive.google.com/uc?export=download&id=0B2lSBow_51i-X25lSlNsS09wRTQ'
    } else if(dataset.equals("jester")){
        ext.dataDir = "data/jester/"
        ext.zipFile = "data/jester.zip"

        include_name = '*'
        url_src = 'https://docs.google.com/uc?id=0B1Iw4oNXJh2AWTQ1SG1lUmUxd1E&export=download'
    }

    outputs.dir dataDir
    outputs.file zipFile
    doLast {
        mkdir dataDir
        ant {
            get(src: url_src,
                dest: zipFile,
                skipExisting: true)
            unzip(src: zipFile, dest: dataDir) {
                patternset {
                    include name: include_name 
                }
                mapper type: 'flatten'
            }
        }
    }
}

task crossfold(type: Crossfold, group: 'evaluate') {
    // download data before evaluating
    dependsOn fetchData
    println 'Dataset '+dataset

    if(dataset.equals("movielens")) {
        input 'data/ml-100k.yml'
    } else if(dataset.equals("lastfm")) {
        input 'data/lastfm-2k.yml'
    } else if(dataset.equals("bookcrossings")) {
        input 'data/bookcrossings.yml'
    } else if (dataset.equals("jester")) {
        input 'data/jester.yml'
    }
    // test on random 1/5 of each user's ratings
    holdoutFraction(0.2, 'random')
    // use 5-fold cross-validation
    partitionCount 5

    outputDir "$buildDir/crossfold/"+dataset
}

task getCrossfoldData {
    doLast {
        description 'Copy to use in analyze'
        delete "$buildDir/crossfold.out"
        copy {
            from "$buildDir/crossfold/"+dataset
            into "$buildDir/crossfold.out"
        }
    }
}

/* Run the LensKit evaluation */
task evaluate(type: TrainTest, group: 'evaluate') {
    description 'Runs the LensKit evaluation.'
    logFile "$buildDir/evaluate.log"
    logFileLevel 'DEBUG'

    // we add our crossfold task as evaluation input
//    dataSet "$buildDir/crossfold/"+dataset+"/datasets.yaml"
//    dataSet crossfold
    dependsOn getCrossfoldData
    dataSet crossfold

    // send the output to appropriate files

    outputFile datasetResultFolder+"/eval-results.csv"
    userOutputFile datasetResultFolder+"/eval-users.csv"

    // configure our algorithms
    algorithm 'PersMean', 'algorithms/pers-mean.groovy'
    algorithm 'ItemItem', 'algorithms/item-item.groovy'
    algorithm 'Custom', 'algorithms/custom.groovy'
	algorithm 'UserUser', 'algorithms/user-user.groovy'
	algorithm 'FunkSVD', 'algorithms/funksvd.groovy'

    // and some evaluation tasks and metrics
    predict {
        metric 'rmse'
        metric 'ndcg'
    }
    recommend {
        listSize 10
        metric 'mrr'
    }
}

task evaluateOutputs {
    dependsOn evaluate

    doLast{
        description 'Copy to use in analyze'
        copy {
            from datasetResultFolder+"/eval-results.csv"
            into "$buildDir"
        }
        copy {
            from datasetResultFolder+"/eval-users.csv"
            into "$buildDir"
        }
    }
}

task analyzeResults(type: Exec, group: 'evaluate') {
    description 'Post-processes evaluation results to draw charts.'
    dependsOn evaluateOutputs

    inputs.files "$buildDir/eval-results.csv", 'analyze-output.ipynb'
    outputs.file datasetResultFolder+"/analysis.html"

    /* run Jupyter/IPython. Location can be overridden with -Pipython.bin=/usr/bin/ipython */
    if (project.hasProperty('ipython.bin')) {
        executable project.getProperty('ipython.bin')
    } else {
        executable 'jupyter'
    }
    args 'nbconvert', '--to', 'html', '--execute'
    args '--output', file(datasetResultFolder+"/analysis.html")
    args file("analyze-output.ipynb")

    doLast {
        delete "$buildDir/eval-results.csv"
        delete "$buildDir/eval-users.csv"
    }
}

task analyzeAllResults(type: Exec, group: 'evaluate') {
    description 'Post-processes evaluation results to draw charts from data-analysis folder'

    inputs.files 'analyze-output.ipynb'
    outputs.file "data-analysis/analysis.html"

    /* run Jupyter/IPython. Location can be overridden with -Pipython.bin=/usr/bin/ipython */
    if (project.hasProperty('ipython.bin')) {
        executable project.getProperty('ipython.bin')
    } else {
        executable 'jupyter'
    }
    args 'nbconvert', '--to', 'html', '--execute'
    args '--output', file("data-analysis/analysis.html")
    args file("analyze-output.ipynb")
}

task cleanData {
    doLast {
        delete 'data'
    }
}
